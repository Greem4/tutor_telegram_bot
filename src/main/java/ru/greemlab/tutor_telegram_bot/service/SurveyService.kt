package ru.greemlab.tutor_telegram_bot.service

import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import ru.greemlab.tutor_telegram_bot.entity.SurveyAnswer
import ru.greemlab.tutor_telegram_bot.entity.TelegramUser
import ru.greemlab.tutor_telegram_bot.repository.SurveyAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.TelegramUserRepository
import ru.greemlab.tutor_telegram_bot.session.SurveySession
import ru.greemlab.tutor_telegram_bot.text.BotMessages
import java.util.concurrent.ConcurrentHashMap

@Service
class SurveyService(
    private val sender: SenderService,
    private val kb: KeyboardService,
    private val userRepo: TelegramUserRepository,
    private val answerRepo: SurveyAnswerRepository
) {
    private val log = LoggerFactory.getLogger(javaClass)

    // –°–µ—Å—Å–∏–∏ –æ–ø—Ä–æ—Å–∞
    private val sessions = ConcurrentHashMap<Long, SurveySession>()

    // –ö—ç—à –ø—Ä–æ—Ñ–∏–ª—è (TelegramUser) –ø–æ chatId
    private val profileCache = ConcurrentHashMap<Long, TelegramUser>()

    /** –°—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ ‚Äî –æ–ø—Ä–æ—Å–∞ */
    fun start(chatId: Long, userId: Long, nick: String?) {
        log.debug(
            "Starting survey for chatId={}, userId={}, nick={}",
            chatId,
            userId,
            nick
        )

        // 1) –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        sessions[chatId]?.let {
            log.debug("Resuming existing survey session for chatId={}", chatId)
            askNext(chatId)  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            return
        }

        // 2) –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val user = userRepo.findByTelegramId(userId)
            .orElseGet {
                val newUser = TelegramUser(telegramId = userId, username = nick)
                userRepo.save(newUser).also {
                    log.debug(
                        "Created new TelegramUser id={} telegramId={}",
                        it.id,
                        it.telegramId
                    )
                }
            }
        // 3) –ï—Å–ª–∏ –æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        if (user.surveyCompleted) {
            log.warn(
                "User {} already completed survey; refusing to restart",
                user.telegramId
            )
            sender.send(chatId, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ãüëá", kb.remove())
            return
        }
        // 4) –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º
        sessions[chatId] = SurveySession(user)
        profileCache[chatId] = user
        log.debug(
            "Created SurveySession for chatId={}, total sessions={}",
            chatId,
            sessions.size
        )
        askNext(chatId)
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞-–æ—Ç–≤–µ—Ç–∞ */
    fun answer(chatId: Long, text: String) {
        log.debug("Received survey answer for chatId={}: {}", chatId, text)
        val session = sessions[chatId] ?: run {
            log.warn("No active session for chatId={}, ignoring answer", chatId)
            return
        }
        session.answer(text)

        if (session.next()) {
            log.debug("Moving to next survey question for chatId={}", chatId)
            askNext(chatId)
        } else {
            log.debug("All survey questions answered for chatId={}", chatId)
            finish(chatId, session)
        }
    }

    /** –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–ø—Ä–æ—Å–∞? */
    fun active(chatId: Long): Boolean =
        sessions.containsKey(chatId)

    /** –û—Ç–º–µ–Ω—è–µ–º –æ–ø—Ä–æ—Å */
    fun cancel(chatId: Long) {
        log.debug("Canceling survey for chatId={}", chatId)
        sessions.remove(chatId)
        profileCache.remove(chatId)
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è CaseService */
    fun takeProfile(chatId: Long): TelegramUser? =
        profileCache[chatId]?.also {
            log.debug("takeProfile for chatId={} -> telegramId={}", chatId, it.telegramId)
        }

    /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–ª–∞–≥–∏) */
    fun updateUser(user: TelegramUser) {
        log.debug(
            "Updating TelegramUser id={} surveyCompleted={} casesCompleted={}",
            user.id, user.surveyCompleted, user.casesCompleted
        )
        userRepo.save(user)
    }

    /** –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */ //TODO —É–¥–∞–ª–∏—Ç—å –∫ –ø—Ä–æ–¥—É 
    fun reset(chatId: Long) {
        profileCache.remove(chatId)
        log.debug("Resetting survey for chatId={}", chatId)
        // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        userRepo.findByTelegramId(chatId)
            .ifPresent { user ->
                user.surveyCompleted = false
                userRepo.save(user)
                log.debug(
                    "surveyCompleted flag reset in DB for telegramId={}",
                    user.telegramId
                )
            }
    }

    /** –®–ª—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å + –∫–Ω–æ–ø–∫—É ¬´üö´ –æ—Ç–º–µ–Ω–∞¬ª */
    private fun askNext(chatId: Long) {
        val prompt = sessions[chatId]?.current?.prompt ?: return
        log.debug("Sending survey prompt to chatId={}: {}", chatId, prompt)
        sender.send(chatId, prompt, kb.cancel())
    }

    /** –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã, —Å—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–µ–π—Å—ã */
    private fun finish(chatId: Long, session: SurveySession) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
        session.dump().forEach { (question, answer) ->
            answerRepo.save(
                SurveyAnswer(user = session.user, question = question, answer = answer)
            )
            log.debug("Saved answer for question={} chatId={}", question, chatId)
        }

        // –ü–æ–º–µ—á–∞–µ–º —Ñ–ª–∞–≥–æ–º –≤ –ë–î
        session.user.apply { surveyCompleted = true }
            .also {
                userRepo.save(it)
                log.debug(
                    "surveyCompleted flag set true for telegramId={}",
                    it.telegramId
                )
            }

        sessions.remove(chatId)
        log.debug("Survey session removed for chatId={}", chatId)

        sender.send(
            chatId,
            BotMessages.CASES_WELCOME_MESSAGE,
            kb.beginCases()
        )
    }
}
