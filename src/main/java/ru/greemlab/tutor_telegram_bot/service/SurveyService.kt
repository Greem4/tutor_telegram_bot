// src/main/kotlin/ru/greemlab/tutor_telegram_bot/service/SurveyService.kt
package ru.greemlab.tutor_telegram_bot.service

import org.springframework.stereotype.Service
import ru.greemlab.tutor_telegram_bot.entity.SurveyAnswer
import ru.greemlab.tutor_telegram_bot.entity.TelegramUser
import ru.greemlab.tutor_telegram_bot.enums.SurveyQuestion
import ru.greemlab.tutor_telegram_bot.repository.SurveyAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.TelegramUserRepository
import ru.greemlab.tutor_telegram_bot.session.SurveySession
import java.util.concurrent.ConcurrentHashMap

@Service
class SurveyService(
    private val sender: SenderService,
    private val kb: KeyboardService,
    private val userRepo: TelegramUserRepository,
    private val answerRepo: SurveyAnswerRepository,
) {
    // –°–µ—Å—Å–∏–∏ –æ–ø—Ä–æ—Å–∞
    private val sessions = ConcurrentHashMap<Long, SurveySession>()

    // –ö—ç—à –ø—Ä–æ—Ñ–∏–ª—è (TelegramUser) –ø–æ chatId
    private val profileCache = ConcurrentHashMap<Long, TelegramUser>()

    /** –°—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ ‚Äî –æ–ø—Ä–æ—Å–∞ */
    fun start(chatId: Long, userId: Long, nick: String?) {
        val user = userRepo.findByTelegramId(userId)
            .orElseGet {
                userRepo.save(TelegramUser(telegramId = userId, username = nick))
            }

        if (user.surveyCompleted) {
            sender.send(chatId, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.", kb.remove())
            return
        }

        // —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        sessions[chatId] = SurveySession(user)
        profileCache[chatId] = user
        askNext(chatId)
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞-–æ—Ç–≤–µ—Ç–∞ */
    fun answer(chatId: Long, text: String) {
        val session = sessions[chatId] ?: return
        session.answer(text)

        if (session.next()) {
            askNext(chatId)
        } else {
            finish(chatId, session)
        }
    }

    /** –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–ø—Ä–æ—Å–∞? */
    fun active(chatId: Long): Boolean =
        sessions.containsKey(chatId)

    /** –û—Ç–º–µ–Ω—è–µ–º –æ–ø—Ä–æ—Å */
    fun cancel(chatId: Long) {
        sessions.remove(chatId)
        profileCache.remove(chatId)
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è CaseService */
    fun takeProfile(chatId: Long): TelegramUser? =
        profileCache[chatId]

    /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–ª–∞–≥–∏) */
    fun updateUser(user: TelegramUser) {
        userRepo.save(user)
    }

    /** –®–ª—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å + –∫–Ω–æ–ø–∫—É ¬´üö´ –æ—Ç–º–µ–Ω–∞¬ª */
    private fun askNext(chatId: Long) {
        val prompt = sessions[chatId]?.current?.prompt ?: return
        sender.send(chatId, prompt, kb.cancel())
    }

    /** –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã, —Å—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–µ–π—Å—ã */
    private fun finish(chatId: Long, session: SurveySession) {
        session.dump().forEach { (question, answer) ->
            answerRepo.save(
                SurveyAnswer(
                    user = session.user,
                    question = question,
                    answer = answer
                )
            )
        }
        session.user.apply { surveyCompleted = true }
            .also(userRepo::save)

        sessions.remove(chatId)

        sender.send(
            chatId, """
            üëè –í—ã –ø—Ä–æ—à–ª–∏ 1 —ç—Ç–∞–ø –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç—å—é—Ç–æ—Ä–∞.
            ‚û°–í–ø–µ—Ä–µ–¥–∏ 2 —ç—Ç–∞–ø - –∫–µ–π—Å—ã.
            –í—Å–µ–≥–æ –±—É–¥–µ—Ç 3 –∫–µ–π—Å–∞. 
            ‚è±–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–µ–π—Å—ã - 30 –º–∏–Ω. 
            –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µüëá
        """.trimIndent(), kb.beginCases()
        )
    }
}
