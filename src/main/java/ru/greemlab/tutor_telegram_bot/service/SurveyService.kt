package ru.greemlab.tutor_telegram_bot.service

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.cache.Cache
import org.springframework.cache.CacheManager
import org.springframework.stereotype.Service
import ru.greemlab.tutor_telegram_bot.catalog.CaseCatalog
import ru.greemlab.tutor_telegram_bot.entity.SurveyAnswer
import ru.greemlab.tutor_telegram_bot.entity.TelegramUser
import ru.greemlab.tutor_telegram_bot.notifier.GroupNotifierService
import ru.greemlab.tutor_telegram_bot.repository.SurveyAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.TelegramUserRepository
import ru.greemlab.tutor_telegram_bot.session.SurveySession
import ru.greemlab.tutor_telegram_bot.text.BotMessages
import java.time.LocalDateTime

@Service
class SurveyService(
    @Value("\${app.bot.admin_id}") private val adminId: Long?,
    private val sender: SenderService,
    private val kb: KeyboardService,
    private val userRepo: TelegramUserRepository,
    private val answerRepo: SurveyAnswerRepository,
    private val cacheManager: CacheManager,
    private val pdf: PdfService,
    private val catalog: CaseCatalog,
    private val groupNotifier: GroupNotifierService
) {
    private val log = LoggerFactory.getLogger(javaClass)

    // –∏–º—è –Ω–∞—à–µ–≥–æ –∫—ç—à–∞ (–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–µ, –Ω–æ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π RedisConfig)
    private val cacheName = "surveySessions"

    // –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    private val cache: Cache
        get() = cacheManager.getCache(cacheName)
            ?: throw IllegalStateException("–ö—ç—à '$cacheName' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    /** –°—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ ‚Äî –æ–ø—Ä–æ—Å–∞ */
    fun start(chatId: Long, userId: Long, nick: String?) {
        log.debug(
            "Starting survey for chatId={}, userId={}, nick={}",
            chatId,
            userId,
            nick
        )

        // 1) –µ—Å–ª–∏ –≤ Redis —É–∂–µ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        cache.get(chatId, SurveySession::class.java)?.let {
            log.debug("Resuming existing survey session for chatId={}", chatId)
            askNext(chatId)
            return
        }

        // 2) –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val user = userRepo.findByTelegramId(userId)
            .orElseGet {
                val newUser = TelegramUser(telegramId = userId, username = nick)
                userRepo.save(newUser).also {
                    log.debug(
                        "Created new TelegramUser id={} telegramId={}",
                        it.id,
                        it.telegramId
                    )
                }
            }

        // 3) –ï—Å–ª–∏ –æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º
        if (user.surveyCompleted) {
            log.warn(
                "User {} already completed survey; refusing to restart",
                user.telegramId
            )
            sender.send(
                chatId,
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ãüëá",
                kb.remove()
            )
            return
        }

        // 4) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –∫–ª–∞–¥—ë–º –µ—ë –≤ Redis
        val session = SurveySession(user)
        cache.put(chatId, session)
        log.debug(
            "Created SurveySession for chatId={}, cached under '{}'",
            chatId,
            cacheName
        )

        askNext(chatId)
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞-–æ—Ç–≤–µ—Ç–∞ */
    fun answer(chatId: Long, text: String) {
        log.debug("Received survey answer for chatId={}: {}", chatId, text)

        // 1) –ó–∞–±–∏—Ä–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Redis
        val entry = cache.get(chatId)?.get()
        if (entry == null) {
            log.warn("No active session for chatId={}, ignoring answer", chatId)
            return
        }
        val session = entry as SurveySession

        // 2) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        session.answer(text)

        if (session.next()) {
            // 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—Ä–∞—Ç–Ω–æ –∏ —à–ª—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            cache.put(chatId, session)
            askNext(chatId)
        } else {
            // 4) –í—ã–≥—Ä—É–∂–∞–µ–º –≤ –ë–î –∏ —á–∏—Å—Ç–∏–º –∫—ç—à
            finish(chatId, session)
            cache.evict(chatId)
        }
    }

    /** –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è? */
    fun active(chatId: Long): Boolean =
        cache.get(chatId)?.get() != null

    /**
     * –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø.
     */
    suspend fun cancel(chatId: Long) {
        log.debug("–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è chatId={}", chatId)

        // 1) –¥–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
        val entry = cache.get(chatId)?.get() as? SurveySession
        if (entry == null) {
            cache.evict(chatId)
            return
        }
        partialFinishSurvey(chatId, entry)
    }


    /** –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */ //TODO —É–¥–∞–ª–∏—Ç—å –∫ –ø—Ä–æ–¥—É
    fun reset(chatId: Long) {
        cache.evict(chatId)
        log.debug("Resetting survey for chatId={}", chatId)
        // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        userRepo.findByTelegramId(chatId)
            .ifPresent { user ->
                user.surveyCompleted = false
                userRepo.save(user)
                log.debug(
                    "surveyCompleted flag reset in DB for telegramId={}",
                    user.telegramId
                )
            }
    }

    fun takeProfile(chatId: Long): TelegramUser? {
        cache.get(chatId, SurveySession::class.java)?.let {
            return it.user
        }
        return userRepo.findByTelegramId(chatId)
            .filter { it.surveyCompleted }
            .orElse(null)
    }

    fun updateUser(user: TelegramUser) {
        log.debug(
            "Updating TelegramUser id={} surveyCompleted={} casesCompleted={}",
            user.id, user.surveyCompleted, user.casesCompleted
        )
        userRepo.save(user)
    }

    /** –®–ª—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å + –∫–Ω–æ–ø–∫—É ¬´üö´ –æ—Ç–º–µ–Ω–∞¬ª */
    private fun askNext(chatId: Long) {
        val session = cache.get(chatId)?.get() as? SurveySession ?: return
        val prompt = session.current.prompt
        log.debug("Sending survey prompt to chatId={}: {}", chatId, prompt)
        sender.send(chatId, prompt, kb.cancel())
    }

    /** –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –ë–î –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–µ–π—Å—ã */
    private fun finish(chatId: Long, session: SurveySession) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
        session.dump().forEach { (question, answer) ->
            answerRepo.save(
                SurveyAnswer(
                    user = session.user,
                    question = question,
                    answer = answer
                )
            )
            log.debug("Saved answer for question={} chatId={}", question, chatId)
        }

        // –ü–æ–º–µ—á–∞–µ–º —Ñ–ª–∞–≥–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        session.user.apply { surveyCompleted = true }
            .also {
                userRepo.save(it)
                log.debug(
                    "surveyCompleted flag set true for telegramId={}",
                    it.telegramId
                )
            }

        log.debug("Survey session completed for chatId={}, removing from cache", chatId)
        sender.send(
            chatId,
            BotMessages.CASES_WELCOME_MESSAGE,
            kb.beginCases()
        )
    }

    /** –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —à–ª—ë–º PDF */
    private suspend fun partialFinishSurvey(chatId: Long, session: SurveySession) {
        // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã, —á—Ç–æ –µ—Å—Ç—å
        val user = session.user.apply { surveyCompleted = true }
        userRepo.save(user)
        session.dump().forEach { (q, a) ->
            answerRepo.save(SurveyAnswer(user = user, question = q, answer = a))
        }

        // 2) —á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é
        cache.evict(chatId)

        // 3) —Å—Ç—Ä–æ–∏–º PDF —Å —Ç–µ–∫—É—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –±–µ–∑ –∫–µ–π—Å–æ–≤
        val surveyAns = session.dump()
        val emptyCases = emptyMap<Int, String>()
        val pdfFile = pdf.build(
            chatId = chatId,
            username = user.username,
            surveyAns = surveyAns,
            caseAns = emptyCases,
            cat = catalog,
            completedAt = LocalDateTime.now()
        )
        sender.send(chatId, "–í—ã –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å")

        // 4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
        adminId?.let {
            sender.document(
                it,
                pdfFile,
                "üì• –û—Ç–º–µ–Ω–∏–º–∞—è –∞–Ω–∫–µ—Ç–∞ @${user.username ?: chatId}"
            )
        }
        // 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
        groupNotifier.notifyOrDefer(
            chatId = chatId,
            username = user.username,
            surveyAns = surveyAns,
            caseAns = emptyMap(),
            catalog = catalog,
            completedAt = LocalDateTime.now()
        )
        log.debug("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π PDF –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chatId={}", chatId)

        cache.evict(chatId)
    }
}
