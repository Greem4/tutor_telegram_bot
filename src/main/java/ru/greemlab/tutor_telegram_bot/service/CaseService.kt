package ru.greemlab.tutor_telegram_bot.service

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import ru.greemlab.tutor_telegram_bot.catalog.CaseCatalog
import ru.greemlab.tutor_telegram_bot.entity.CaseAnswer
import ru.greemlab.tutor_telegram_bot.entity.TelegramUser
import ru.greemlab.tutor_telegram_bot.enums.SurveyQuestion
import ru.greemlab.tutor_telegram_bot.repository.CaseAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.SurveyAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.TelegramUserRepository
import ru.greemlab.tutor_telegram_bot.session.CaseSession
import java.util.concurrent.ConcurrentHashMap

@Service
class CaseService(
    @Value("\${app.bot.admin_id}") private val adminId: Long?, // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private val catalog: CaseCatalog, // –ö–∞—Ç–∞–ª–æ–≥ –∫–µ–π—Å–æ–≤
    private val sender: SenderService, // –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞
    private val kb: KeyboardService, // –°–µ—Ä–≤–∏—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    private val pdf: PdfService, // –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    private val surveyService: SurveyService, // –°–µ—Ä–≤–∏—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–Ω–∫–µ—Ç–æ–π
    private val surveyAnswerRepo: SurveyAnswerRepository, // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç–≤–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç—ã
    private val caseAnswerRepo: CaseAnswerRepository, // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–µ–π—Å—ã
    private val userRepo: TelegramUserRepository //TODO –∫ –ø—Ä–æ–¥—É —É–¥–∞–ª–∏—Ç—å
) {
    private val log = LoggerFactory.getLogger(javaClass)
    private val sessions = ConcurrentHashMap<Long, CaseSession>()

    /**
     * –ó–∞–ø—É—Å–∫ 2-–≥–æ —ç—Ç–∞–ø–∞ ‚Äî –∫–µ–π—Å–æ–≤.
     */
    suspend fun start(chatId: Long) {
        log.debug("Start cases for chatId={}", chatId)
        val user: TelegramUser = surveyService.takeProfile(chatId)
            ?: run {
                log.warn(
                    "Profile not found for chatId={}, asking to complete survey first",
                    chatId
                )
                sender.send(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å–Ω–∏–∫.", kb.start())
                return
            }

        if (user.casesCompleted) {
            log.debug(
                "User {} has already completed cases, skipping start",
                user.telegramId
            )
            sender.send(chatId, "–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–µ–π—Å—ã —Ä–∞–Ω–µ–µ.", kb.remove())
            return
        }

        sessions[chatId] = CaseSession(user, catalog)
        log.debug(
            "Created CaseSession for chatId={}, total sessions={}",
            chatId,
            sessions.size
        )
        askNext(chatId)
    }

    fun active(chatId: Long): Boolean =
        sessions.containsKey(chatId)

    fun cancel(chatId: Long) {
        log.debug("Canceling cases for chatId={}", chatId)
        sessions.remove(chatId)
    }

    suspend fun answer(chatId: Long, text: String) {
        log.debug("Received answer for chatId={}: {}", chatId, text)
        val session = sessions[chatId] ?: run {
            log.warn("No active CaseSession for chatId={}, ignoring answer", chatId)
            return
        }

        session.answer(text)
        if (session.next()) {
            log.debug("Moving to next case for chatId={}", chatId)
            askNext(chatId)
        } else {
            log.debug("All cases answered for chatId={}, finishing", chatId)
            finish(chatId, session)
        }
    }

    private suspend fun askNext(chatId: Long) {
        val kase = sessions[chatId]?.current ?: return
        log.debug("Asking case #{} to chatId={}", kase.id, chatId)
        sender.photo(chatId, kase.image, kb.cancel())
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–æ–≤ –∏ —Ñ–ª–∞–≥ –≤ –ë–î.
     */   //TODO –∫ –ø—Ä–æ–¥—É —É–¥–∞–ª–∏—Ç—å 
    fun reset(chatId: Long) {
        log.debug("Resetting survey for chatId={}", chatId)
        sessions.remove(chatId)
        // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        userRepo.findByTelegramId(chatId)
            .ifPresent { user ->
                user.casesCompleted = false
                userRepo.save(user)
                log.debug("surveyCompleted flag reset in DB for telegramId={}", user.telegramId)
            }
    }

    private suspend fun finish(chatId: Long, session: CaseSession) {
        log.debug("Finishing cases for chatId={}", chatId)
        // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
        session.dump().forEach { (idx, answer) ->
            caseAnswerRepo.save(
                CaseAnswer(
                    user = session.user,
                    caseIndex = idx,
                    answer = answer
                )
            )
            log.debug("Saved CaseAnswer idx={} for user={}", idx, session.user.telegramId)
        }

        // 2) –æ—Ç–º–µ—á–∞–µ–º
        session.user.apply { casesCompleted = true }
            .also { surveyService.updateUser(it) }
        log.debug("casesCompleted flag set to true for user={}", session.user.telegramId)

        sessions.remove(chatId)

        // 3) —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã 1-–≥–æ —ç—Ç–∞–ø–∞
        val surveyAnswers: Map<SurveyQuestion, String> =
            surveyAnswerRepo.findByUser(session.user)
                .associate { it.question to it.answer }
        log.debug(
            "Loaded {} survey answers for user={}",
            surveyAnswers.size,
            session.user.telegramId
        )

        // 4) –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–µ–π—Å–∞–º
        val caseAnswers = session.dump()

        // 5) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        val nick = session.user.username
        val pdfFile = pdf.build(
            chatId = chatId,
            nike = nick,
            surveyAns = surveyAnswers,
            caseAns = caseAnswers,
            cat = catalog
        )
        log.debug("Generated PDF for chatId={}", chatId)

        // 6) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sender.send(
            chatId,
            "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üèÅ\n–°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ."
        )
        sender.send(chatId, "–ö—Ç–æ —Ç–∞–∫–æ–π —Ç—å—é—Ç–æ—Ä –≤ –®–∫–æ–ª–µ ¬´–ù–ò–ö–ê¬ª üëá", kb.abortTutor())

        // 7) –∞–¥–º–∏–Ω—É
        adminId?.let { admin ->
            sender.document(admin, pdfFile, "üì• –û—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ @${nick ?: chatId}")
            log.debug("Sent PDF to admin={}", admin)
        }
    }
}
