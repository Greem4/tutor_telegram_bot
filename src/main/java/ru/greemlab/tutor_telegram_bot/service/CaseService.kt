package ru.greemlab.tutor_telegram_bot.service

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import ru.greemlab.tutor_telegram_bot.catalog.CaseCatalog
import ru.greemlab.tutor_telegram_bot.entity.CaseAnswer
import ru.greemlab.tutor_telegram_bot.entity.TelegramUser
import ru.greemlab.tutor_telegram_bot.enums.SurveyQuestion
import ru.greemlab.tutor_telegram_bot.repository.CaseAnswerRepository
import ru.greemlab.tutor_telegram_bot.repository.SurveyAnswerRepository
import ru.greemlab.tutor_telegram_bot.session.CaseSession
import java.util.concurrent.ConcurrentHashMap

@Service
class CaseService(
    @Value("\${app.bot.admin_id}") private val adminId: Long?,
    private val catalog: CaseCatalog,
    private val sender: SenderService,
    private val kb: KeyboardService,
    private val pdf: PdfService,
    private val surveyService: SurveyService,
    private val surveyAnswerRepo: SurveyAnswerRepository,
    private val caseAnswerRepo: CaseAnswerRepository,
) {
    private val sessions = ConcurrentHashMap<Long, CaseSession>()

    /**
     * –°—Ç–∞—Ä—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞ ‚Äî –∫–µ–π—Å–æ–≤.
     * _userId –∏ _nick –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, –ø—Ä–æ—Ñ–∏–ª—å –±–µ—Ä—ë–º –∏–∑ SurveyService
     */
    suspend fun start(chatId: Long) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
        val user: TelegramUser = surveyService.takeProfile(chatId)
            ?: run {
                sender.send(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å–Ω–∏–∫.", kb.start())
                return
            }

        if (user.casesCompleted) {
            sender.send(chatId, "–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–µ–π—Å—ã —Ä–∞–Ω–µ–µ.", kb.remove())
            return
        }

        sessions[chatId] = CaseSession(user, catalog)
        askNext(chatId)
    }

    fun active(chatId: Long): Boolean =
        sessions.containsKey(chatId)

    fun cancel(chatId: Long) {
        sessions.remove(chatId)
    }

    suspend fun answer(chatId: Long, text: String) {
        val session = sessions[chatId] ?: return
        session.answer(text)

        if (session.next()) {
            askNext(chatId)
        } else {
            finish(chatId, session)
        }
    }

    private suspend fun askNext(chatId: Long) {
        val kase = sessions[chatId]?.current ?: return

        sender.photo(chatId, kase.image)

        val tasksText = if (kase.tasks.isNotEmpty()) {
            kase.tasks.joinToString("\n", prefix = "\n") { "‚Ä¢ $it" }
        } else ""
        val prompt = "${kase.description}$tasksText\n\n–í–∞—à –æ—Ç–≤–µ—Ç:"
        sender.send(chatId, prompt, kb.cancel())
    }

    private suspend fun finish(chatId: Long, session: CaseSession) {
        // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –∫–µ–π—Å–æ–≤
        session.dump().forEach { (idx, answer) ->
            caseAnswerRepo.save(
                CaseAnswer(
                    user = session.user,
                    caseIndex = idx,
                    answer = answer
                )
            )
        }
        // 2) —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.user.apply { casesCompleted = true }
            .also { surveyService.updateUser(it) }
        sessions.remove(chatId)

        // 3) —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        val surveyAnswers: Map<SurveyQuestion, String> =
            surveyAnswerRepo.findByUser(session.user)
                .associate { it.question to it.answer }

        // 4) —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫–µ–π—Å–æ–≤
        val caseAnswers: Map<Int, String> = session.dump()

        // 5) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        val nick = session.user.username
        val pdfFile = pdf.build(
            chatId    = chatId,
            nike      = nick,
            surveyAns = surveyAnswers,  // —Ç–µ–ø–µ—Ä—å —Ç–∏–ø —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            caseAns   = caseAnswers,
            cat       = catalog
        )

        /* –∫–∞–Ω–¥–∏–¥–∞—Ç—É */
        sender.send(
            chatId, """
            –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üèÅ
            –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. 
            –°–ø–∞—Å–∏–±–æ.
        """.trimIndent()
        )
        sender.send(
            chatId, """
            –ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º, –∫—Ç–æ —Ç–∞–∫–æ–π —Ç—å—é—Ç–æ—Ä –≤ –û–ê–ù–û 
            –®–∫–æ–ª–∞ "–ù–ò–ö–ê" üëá
        """.trimIndent(), kb.abortTutor()
        )

        adminId?.let { admin ->
            sender.document(admin, pdfFile, "üì• –û—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ @${nick ?: chatId}")
        }
    }
}
