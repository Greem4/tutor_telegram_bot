package ru.greemlab.tutor_telegram_bot.notifier

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import ru.greemlab.tutor_telegram_bot.catalog.CaseCatalog
import ru.greemlab.tutor_telegram_bot.entity.PendingNotification
import ru.greemlab.tutor_telegram_bot.enums.SurveyQuestion
import ru.greemlab.tutor_telegram_bot.repository.PendingNotificationRepository
import ru.greemlab.tutor_telegram_bot.service.PdfService
import ru.greemlab.tutor_telegram_bot.service.SenderService
import java.io.File
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.ZoneId

@Component
class GroupNotifierService(
    @Value("\${app.bot.group_id}") private val groupId: Long?,      // ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    private val sender: SenderService,
    private val pdfService: PdfService,
    private val pendingRepo: PendingNotificationRepository
) {
    private val log = LoggerFactory.getLogger(javaClass)

    // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ–∫–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    private val zone      = ZoneId.of("Europe/Moscow")
    // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: [10:00, 22:00)
    private val startTime = LocalTime.of(10, 0)
    private val endTime   = LocalTime.of(22, 0)

    /**
     * –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏–º PDF, –∑–∞—Ç–µ–º:
     * ‚Äî –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ [10:00,22:00) –ø–æ –ú–°–ö, —à–ª—ë–º —Å—Ä–∞–∑—É –≤ –≥—Ä—É–ø–ø—É;
     * ‚Äî –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º PendingNotification —Å userChatId –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
     */
    fun notifyOrDefer(
        chatId: Long,
        username: String?,
        surveyAns: Map<SurveyQuestion, String>,
        caseAns: Map<Int, String>,
        catalog: CaseCatalog,
        completedAt: LocalDateTime
    ) {
        // 1) –°–æ–±–∏—Ä–∞–µ–º PDF
        val pdfFile: File = pdfService.build(
            chatId    = chatId,
            username  = username,
            surveyAns = surveyAns,
            caseAns   = caseAns,
            cat       = catalog,
            completedAt = completedAt
        )

        // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        val now = LocalTime.now(zone)
        log.debug("GroupNotifier: now={}, window={}‚Äì{}", now, startTime, endTime)

        if (!now.isBefore(startTime) && now.isBefore(endTime)) {
            // 10:00 ‚â§ now < 22:00 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            doSend(pdfFile, username, chatId)
        } else {
            // –∏–Ω–∞—á–µ ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
            pendingRepo.save(
                PendingNotification(
                    telegramId = chatId,                         // —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    username   = username ?: chatId.toString()
                )
            )
            log.info("Deferred notification for ${username ?: chatId}: now $now outside $startTime‚Äì$endTime")
        }
    }

    /**
     * –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ –≥—Ä—É–ø–ø—É (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏).
     */
    private fun doSend(pdf: File, username: String?, chatId: Long) {
        val who     = username?.let { "@$it" } ?: chatId.toString()
        val caption = "üì• PDF –æ—Ç $who"

        groupId?.let { gid ->
            sender.document(gid, pdf, caption)
            log.debug("Sent PDF to group $gid for $who")
        } ?: log.warn("GroupNotifier: groupId is null, cannot send PDF")
    }
}
